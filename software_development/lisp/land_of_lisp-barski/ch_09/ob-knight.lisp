(defparameter *player-health* nil)
(defparameter *player-agility* nil)
(defparameter *player-strength* nil)

(defun init-player ()
  (setf *player-health* 30)
  (setf *player-agility* 30)
  (setf *player-strength* 30))

(defun player-attack-num() (1+ (truncate (/ (max 0 *player-agility*) 15))))
(defun player-dead () (<= *player-health* 0))

(defun show-player ()
  (fresh-line)
  (princ "You are a valiant knight with a health of ")
  (princ *player-health*)
  (princ ", an agility of ")
  (princ *player-agility*)
  (princ ", and a strength of ")
  (princ *player-strength*))

(defun player-attack ()
  (fresh-line)
  (princ "Attack style: [s]tab [d]ouble swing [r]oundhouse:")
  (case (read)
    (s (monster-hit (pick-monster) (+ 2 (randval (/ *player-strength* 2)))))
    (d (let ((hit-str (randval (truncate (/ *player-strength* 6)))))
         (princ "Your double swing has a strength of ")
         (princ hit-str)
         (fresh-line)
         (monster-hit (pick-monster) hit-str)
         (unless (monsters-dead)
           (monster-hit (pick-monster) hit-str))))
    (otherwise (dotimes (_ (1+ (randval (truncate (/ *player-strength* 3)))))
                 (unless (monsters-dead)
                   (monster-hit (random-monster) 1))))))

(defun random-monster ()
  (let ((m (aref *monsters* (random (length *monsters*)))))
    (if (monster-dead m) (random-monster) m)))

(defun pick-monster ()
  (fresh-line)
  (princ "Monster #:")
  (let ((i (read)))
    (when (not (and (integerp i) (<= 1 i *monster-num*)))
      (princ "That is not a valid monster number.")
      (pick-monster))
    (let ((m (aref *monsters* (1- i))))
      (when (monster-dead m)
        (princ "That monster is already dead.")
        (pick-monster))
      m)))
